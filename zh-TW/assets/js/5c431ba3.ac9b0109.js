"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[86216],{49613:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>g});var i=o(59496);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,i)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,i,n=function(e,t){if(null==e)return{};var o,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)o=r[i],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)o=r[i],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=i.createContext({}),m=function(e){var t=i.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},p=function(e){var t=m(e.components);return i.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var o=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(o),u=n,g=c["".concat(l,".").concat(u)]||c[u]||h[u]||r;return o?i.createElement(g,a(a({ref:t},p),{},{components:o})):i.createElement(g,a({ref:t},p))}));function g(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=o.length,a=new Array(r);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:n,a[1]=s;for(var m=2;m<r;m++)a[m]=o[m];return i.createElement.apply(null,a)}return i.createElement.apply(null,o)}u.displayName="MDXCreateElement"},93822:(e,t,o)=>{o.d(t,{Z:()=>s});var i=o(59496),n=o(96151);const r=i.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},i.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}));class a extends i.Component{render(){return i.createElement(n.Z,{color:"var(--highlight-color-caution)",header:"Caution",type:"caution",icon:r},this.props.children)}}const s=a},28128:(e,t,o)=>{o.d(t,{Z:()=>r});var i=o(59496);class n extends i.Component{render(){return i.createElement("div",{className:"code-header"},i.createElement("div",null,i.createElement("h5",null,this.props.children)))}}const r=n},89639:(e,t,o)=>{o.d(t,{Z:()=>r});var i=o(59496),n=o(7029);const r=function(e){const t=e.noShadow||!1,o=e.width,r=e.height,a=(0,n.Z)(e.imageSource);return t?i.createElement("div",{className:"figure noshadow"},i.createElement("a",{href:a,target:"_blank"},i.createElement("img",{width:o,height:r,src:a})),i.createElement("p",null,e.children)):i.createElement("div",{className:"figure"},i.createElement("a",{href:a,target:"_blank"},i.createElement("img",{width:o,height:r,src:a})),i.createElement("p",null,e.children))}},96151:(e,t,o)=>{o.d(t,{Z:()=>r});var i=o(59496);class n extends i.Component{render(){const e=`highlight highlight-${this.props.type}`;return i.createElement("div",{className:e},i.createElement("div",{className:"highlight-heading"},i.createElement("h5",null,i.createElement("div",{className:"highlight-icon"},this.props.icon),this.props.header)),i.createElement("div",{className:"highlight-content"},this.props.children))}}const r=n},36838:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>k,frontMatter:()=>p,metadata:()=>h,toc:()=>g});o(59496);var i=o(49613),n=o(93822),r=o(28128),a=o(95375),s=o(89639);function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(e[i]=o[i])}return e},l.apply(this,arguments)}function m(e,t){if(null==e)return{};var o,i,n=function(e,t){if(null==e)return{};var o,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)o=r[i],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)o=r[i],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}const p={id:"image-compression",title:"\u5716\u50cf\u58d3\u7e2e"},c=void 0,h={unversionedId:"development/ui-development/touchgfx-engine-features/image-compression",id:"development/ui-development/touchgfx-engine-features/image-compression",title:"\u5716\u50cf\u58d3\u7e2e",description:"\u5f9e4.22\u7248\u672c\u958b\u59cb\uff0cTouchGFX\u652f\u63f4\u4f7f\u7528\u5716\u50cf\u58d3\u7e2e\u3002 The support from version 4.22 to 4.23 inclusive is limited to compression of L8 images. From version 4.24 compression of RGB565, RGB888, and ARGB8888 image formats is supported.",source:"@site/i18n/zh-TW/docusaurus-plugin-content-docs/current/development/ui-development/touchgfx-engine-features/image-compression.mdx",sourceDirName:"development/ui-development/touchgfx-engine-features",slug:"/development/ui-development/touchgfx-engine-features/image-compression",permalink:"/4.24/zh-TW/docs/development/ui-development/touchgfx-engine-features/image-compression",draft:!1,tags:[],version:"current",frontMatter:{id:"image-compression",title:"\u5716\u50cf\u58d3\u7e2e"},sidebar:"docs",previous:{title:"\u5411\u91cf\u5b57\u578b",permalink:"/4.24/zh-TW/docs/development/ui-development/touchgfx-engine-features/vector-fonts"},next:{title:"Animation Storage",permalink:"/4.24/zh-TW/docs/development/ui-development/touchgfx-engine-features/animation-storage"}},u={},g=[{value:"L8\u58d3\u7e2e",id:"l8-compression",level:2},{value:"3 algorithms #{three-algorithms}",id:"3-algorithms-three-algorithms",level:3},{value:"RGB Compression",id:"rgb-compression",level:2},{value:"2 algorithms",id:"two-algorithms",level:3},{value:"Working with Compressed Images",id:"working-with-compressed-images",level:2},{value:"Enabling the Image Compression Features",id:"enabling-image-compression",level:3},{value:"L8\u58d3\u7e2e",id:"working-with-l8-compression",level:3},{value:"RGB Compression",id:"working-with-rgb-compression",level:3},{value:"\u58d3\u7e2e\u7a0b\u5ea6",id:"compression-level",level:2},{value:"Compression Failure",id:"compression-failure",level:2},{value:"L8 Images",id:"compression-failure-l8-images",level:3},{value:"RGB Images",id:"compression-failure-rgb-images",level:3},{value:"Decompressing Images to the Bitmap Cache",id:"decompressing-images-to-the-bitmap-cache",level:2},{value:"Limit program size",id:"limit-program-size",level:3},{value:"\u9650\u5236",id:"limitations",level:2}],d={toc:g},f="wrapper";function k(e){var{components:t}=e,o=m(e,["components"]);return(0,i.kt)(f,l({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u5f9e4.22\u7248\u672c\u958b\u59cb\uff0cTouchGFX\u652f\u63f4\u4f7f\u7528\u5716\u50cf\u58d3\u7e2e\u3002 The support from version 4.22 to 4.23 inclusive is limited to compression of L8 images. From version 4.24 compression of RGB565, RGB888, and ARGB8888 image formats is supported."),(0,i.kt)("p",null,"\u5716\u50cf\u58d3\u7e2e\u662f\u7e2e\u6e1b\u5716\u50cf\u5132\u5b58\u9700\u6c42\u7684\u7a0b\u5e8f\u3002 \u5728\u5c08\u6848\u4e2d\u7e2e\u6e1b\u5716\u50cf\u5c3a\u5bf8\uff0c\u5982\u679c\u80fd\u5920\u56e0\u6b64\u4f7f\u7528\u66f4\u5c0f\u7684Flash\uff0c\u5c31\u80fd\u964d\u4f4e\u6210\u672c\u3002 \u7e2e\u6e1b\u5c3a\u5bf8\u4e5f\u80fd\u8b93\u5c08\u6848\u4f7f\u7528\u66f4\u591a\u5716\u50cf\uff0c\u7522\u751f\u66f4\u8c50\u5bcc\u7684UI\u3002"),(0,i.kt)("p",null,"\u5716\u50cf\u58d3\u7e2e\u4e00\u822c\u6709\u5169\u7a2e\u9078\u64c7\uff1a\u7121\u640d\u6216\u6709\u640d\u3002 \u6709\u640d\u5716\u50cf\u58d3\u7e2e\u7684\u904b\u4f5c\u539f\u7406\u662f\u79fb\u9664\u5716\u50cf\u7684\u5fae\u5c0f\u7d30\u7bc0\u3002 \u9019\u901a\u5e38\u53ef\u9054\u5230\u6700\u5927\u7684\u7e2e\u6e1b\u7387\uff0c\u4f46\u7121\u6cd5\u5b8c\u5168\u78ba\u5207\u91cd\u73fe\u539f\u59cb\u5716\u50cf\u3002 \u7121\u640d\u58d3\u7e2e\u5247\u4e00\u5b9a\u53ef\u4ee5\u91cd\u73fe\u539f\u59cb\u5716\u50cf\uff0c\u6c92\u6709\u4efb\u4f55\u5dee\u7570\u3002 \u7121\u640d\u58d3\u7e2e\u4e00\u822c\u4f86\u8aaa\u5c3a\u5bf8\u7e2e\u6e1b\u7387\u8f03\u4f4e\u3002"),(0,i.kt)("p",null,"\u5c0d\u5716\u5f62\u800c\u8a00\uff0c\u901a\u5e38\u6703\u8981\u6c42\u7e6a\u88fd\u7684UI\u5143\u7d20\u8207\u7576\u521d\u8a2d\u8a08\u6642\u5b8c\u5168\u4e00\u6a23\u3002 \u56e0\u6b64TouchGFX\u50c5\u652f\u63f4\u7121\u640d\u58d3\u7e2e\u3002"),(0,i.kt)("p",null,"\u5716\u50cf\u58d3\u7e2e\u7684\u512a\u9ede\u5728\u65bc\u7e2e\u5c0f\u5c3a\u5bf8\uff0c\u4f46\u7f3a\u9ede\u5247\u662f\u5716\u50cf\u7e6a\u88fd\u5230\u5f71\u50cf\u7de9\u885d\u5340\u6642\u5fc5\u9808\u9032\u884c\u89e3\u58d3\u7e2e\u3002 \u76f8\u8f03\u65bc\u7e6a\u88fd\u672a\u58d3\u7e2e\u5716\u50cf\uff0c\u89e3\u58d3\u7e2e\u5728\u8a31\u591a\u60c5\u6cc1\u4e0b\u6703\u589e\u52a0CPU\u5de5\u4f5c\u91cf\uff0c \u53ef\u80fd\u7d50\u679c\u5c31\u662f\u964d\u4f4e\u6548\u80fd\u3002"),(0,i.kt)("p",null,"\u9019\u4ee3\u8868\u6211\u5011\u5fc5\u9808\u5c07\u6e1b\u5c11Flash\u6240\u7372\u5f97\u7684\u512a\u9ede\uff0c\u8207\u589e\u52a0CPU\u7528\u91cf\u7684\u7f3a\u9ede\u9032\u884c\u6bd4\u8f03\u3002"),(0,i.kt)("p",null,"\u8acb\u6ce8\u610f\uff0c\u8a31\u591aSTM32\u5fae\u63a7\u5236\u5668\u4e2d\u7684\u5716\u5f62\u52a0\u901f\u5668DMA2D\u53caGPU2D (ChromART\u53caNeoChrom GPU)\u7121\u6cd5\u76f4\u63a5\u7e6a\u88fd\u58d3\u7e2e\u5716\u50cf\u3002 Compressed images are drawn using a mix of software and hardware rendering, i.e. the compressed data is decompressed in chunks by software and these chunks are then delegated to the DMA2D where applicable."),(0,i.kt)("p",null,"\u8a31\u591a\u61c9\u7528\u7a0b\u5f0f\u90fd\u4e0d\u5efa\u8b70\u58d3\u7e2e\u6240\u6709\u5716\u50cf\uff0c\u800c\u662f\u50c5\u58d3\u7e2e\u6548\u80fd\u4e0d\u6703\u53d7\u640d\u4e14\u6e1b\u5c11Flash\u81f3\u95dc\u91cd\u8981\u7684\u5716\u50cf\u3002 See also the section below about ",(0,i.kt)("a",l({parentName:"p"},{href:"#decompressing-images-to-the-bitmap-cache"}),"decompression to the Bitmap cache")," as a mean to get both lower storage requirement and good performance."),(0,i.kt)("h2",l({},{id:"l8-compression"}),"L8\u58d3\u7e2e"),(0,i.kt)("p",null,"\u5982\u524d\u6240\u8ff0\uff0cTouchGFX 4.22\u652f\u63f4L8\u5716\u50cf\u58d3\u7e2e\u3002 \u56de\u60f3\u4e00\u4e0b\uff0cL8\u9ede\u9663\u5716\u683c\u5f0f\u50c5\u9069\u5408\u7528\u65bc\u6700\u591a256\u7a2e\u8272\u5f69\u7684\u5716\u50cf\u3002 \u6bcf\u500b\u50cf\u7d20\u90fd\u53ea\u662f8\u4f4d\u5143\u6578\u5b57\uff0c\u5728\u8207\u5716\u50cf\u4e00\u540c\u5132\u5b58\u7684\u8272\u8868\u4e2d\u7528\u65bc\u4ee3\u8868\u8272\u5f69\u3002 The compression of an L8 is only compression of the pixel numbers. \u4e26\u6c92\u6709\u52d5\u5230\u8272\u8868\u3002"),(0,i.kt)("p",null,"\u8acb\u53c3\u8003\u4ee5\u4e0b\u5716\u50cf\u4f5c\u70ba\u7bc4\u4f8b\u3002 \u8a72\u5716\u50cf\u662f\u8a08\u91cf\u61c9\u7528\u7a0b\u5f0f\u4e2d\u4f7f\u7528\u7684\u80cc\u666f\u3002"),(0,i.kt)(s.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/gauge.png",mdxType:"Figure"},"L8-ARGB8888"),(0,i.kt)("p",null,"\u5716\u50cf\u70ba184 x 184\u50cf\u7d20\uff0c The size of the pixel data is thus 184 x 184 = 33,856 bytes."),(0,i.kt)("p",null,"If we compress the image the pixel data is reduced to 5,735 bytes. The total size of the compressed image data, including the color table, is less than 20% of the original image. Compression thus allows us to have 5 different backgrounds in the same flash space, or to reduce the flash requirements by 28,121 bytes."),(0,i.kt)("p",null,"\u58d3\u7e2eL8\u5716\u50cf\u4f7f\u7528\u6642\u5c31\u50cf\u662f\u4e00\u822c\u7684\u672a\u58d3\u7e2e\u9ede\u9663\u5716\u3002 \u4f8b\u5982\u60a8\u53ef\u4f7f\u7528\u5716\u50cf\u5c0f\u5de5\u5177\u986f\u793a\u5716\u50cf\uff0c\u7121\u9700\u5728TouchGFX Designer\u6216\u7a0b\u5f0f\u78bc\u4e2d\u5c0d\u5c08\u6848\u9032\u884c\u4efb\u4f55\u4fee\u6539\u3002 This makes use of compressed L8 images very easy."),(0,i.kt)("h3",l({},{id:"3-algorithms-three-algorithms"}),"3 algorithms #{three-algorithms}"),(0,i.kt)("p",null,"TouchGFX uses 3 different compression algorithms for the L8 format. The image converter selects the algorithm that gives the best compression, unless the user has mandated a specific algorithm in the configuration. The algorithms are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"L4\uff1a\u4ee54\u4f4d\u5143\u70ba\u55ae\u4f4d\u7de8\u78bc\u5404\u500b\u50cf\u7d20\u3002 \u50c5\u9069\u7528\u65bc\u6700\u591a16\u7a2e\u8272\u5f69\u7684\u5716\u50cf\u3002"),(0,i.kt)("li",{parentName:"ul"},"RLE\uff1a\u5c0d\u50cf\u7d20\u9032\u884c\u9577\u5ea6\u7de8\u78bc\u3002 \u50c5\u9069\u7528\u65bc\u6700\u591a64\u7a2e\u8272\u5f69\u7684\u5716\u50cf\u3002"),(0,i.kt)("li",{parentName:"ul"},"LZW9\uff1a\u63a1\u7528\u5b57\u5178\u578b\u7de8\u78bc\u3002 \u9069\u7528\u65bc\u6240\u6709L8\u5716\u50cf\u3002")),(0,i.kt)("p",null,"RLE\u6f14\u7b97\u6cd5\u7684\u89e3\u58d3\u7e2e\u901f\u5ea6\u6bd4LZW9\u5feb\u5f88\u591a\uff0c\u56e0\u6b64\u5982\u679cLZW9\u58d3\u7e2e\u5716\u50cf\u7684\u6548\u679c\u53ea\u7a0d\u5fae\u597d\u4e00\u4e9b\uff0c\u5716\u50cf\u8f49\u63db\u5668\u5c31\u6703\u9078\u64c7\u4f7f\u7528RLE\u3002"),(0,i.kt)("h2",l({},{id:"rgb-compression"}),"RGB Compression"),(0,i.kt)("p",null,"As mentioned earlier, TouchGFX 4.24 introduced image compression support for the RGB565, RGB888, and ARGB8888 image formats. Images which contains more than 256 unique colors cannot be stored in the compact L8 image format and must be stored in one of the aforementioned formats. The compression of an RGB565, RGB888, or ARGB8888 image is directly compressing the 16-, 24-, or 32-bit pixels."),(0,i.kt)("p",null,"\u8acb\u53c3\u8003\u4ee5\u4e0b\u5716\u50cf\u4f5c\u70ba\u7bc4\u4f8b\u3002 It is a more complex and rich background than the above example and has more than 256 unique colors. Therefore, it cannot be stored in L8, and it must be stored in the ARGB8888 format because it has transparent pixels (in the corners)."),(0,i.kt)(s.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/clock.png",mdxType:"Figure"},"ARGB8888"),(0,i.kt)("p",null,"The image is 240 x 240 pixels. The size of the pixel data is thus 240 x 240 x 4 = 230.400 bytes because we use 4 bytes to store each pixel in the ARGB8888 image format."),(0,i.kt)("p",null,"Compressing the image reduces the size to 32.347 bytes. The size of the compressed image is considerably smaller and only 14% of the original image size. Compression allows us to have multiple complex backgrounds in the same flash space, or reduce the flash requirements by a substantial amount. It also enables flash-limited devices to adopt more complex and rich graphics than otherwise possible with the L8 formats."),(0,i.kt)("p",null,"A compressed RGB image can be used like an ordinary uncompressed bitmap. \u4f8b\u5982\u60a8\u53ef\u4f7f\u7528\u5716\u50cf\u5c0f\u5de5\u5177\u986f\u793a\u5716\u50cf\uff0c\u7121\u9700\u5728TouchGFX Designer\u6216\u7a0b\u5f0f\u78bc\u4e2d\u5c0d\u5c08\u6848\u9032\u884c\u4efb\u4f55\u4fee\u6539\u3002 This makes use of compressed RGB images very easy."),(0,i.kt)(n.Z,{mdxType:"Caution"},"Applying any ",(0,i.kt)(a.Z,{to:"../../../basic-concepts/color-formats#dithering",mdxType:"Link"},"dithering algorithm")," to an RGB image can in some cases compromise the effectiveness of the RGB compression."),(0,i.kt)("h3",l({},{id:"two-algorithms"}),"2 algorithms"),(0,i.kt)("p",null,"TouchGFX uses 2 slightly different compression algorithms which are automatically selected based on the image format to be compressed. The algorithms are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"QOI, encodes RGB888 and ARGB8888 pixels using a variation of the ",(0,i.kt)("em",{parentName:"li"},"Quite OK Image format")," compression algorithm."),(0,i.kt)("li",{parentName:"ul"},"QOI565, encodes RGB565 pixels using a variation of QOI that is tailored for 16-bit pixel values.")),(0,i.kt)("p",null,"Both variants of the RGB Compression algorithms are optimized for fast decompression speeds to limit the run-time performance penalty when rendering compressed RGB images."),(0,i.kt)("h2",l({},{id:"working-with-compressed-images"}),"Working with Compressed Images"),(0,i.kt)("h3",l({},{id:"enabling-image-compression"}),"Enabling the Image Compression Features"),(0,i.kt)("p",null,"Image compression requires extra code in the target application. To avoid this higher space requirements, the compression code is optional on some platforms. You may have to enable the feature for your project."),(0,i.kt)("p",null,'Click "Config" on the left of the Designer, then click "Framework Features"'),(0,i.kt)(s.Z,{width:"80%",imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/feature-config.png",mdxType:"Figure"},"Enabling image compression"),(0,i.kt)("p",null,"The image compression features are shown in the bottom. You can enable the specific feature set you need."),(0,i.kt)("p",null,"The targets has different options for the framework features, and in some cases the target has no optional features as shown below:"),(0,i.kt)(s.Z,{width:"80%",imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/feature-config-u5.png",mdxType:"Figure"},"No optional framework features"),(0,i.kt)("p",null,"In this case all the features are always enabled."),(0,i.kt)(n.Z,{mdxType:"Caution"},"Be aware that the Designer does not show an error or warning if you use a feature that is not enabled. If you use image compression and the features is not enabled, the image is not drawn."),(0,i.kt)("h3",l({},{id:"working-with-l8-compression"}),"L8\u58d3\u7e2e"),(0,i.kt)("p",null,"\u58d3\u7e2e\u5716\u50cf\u7684\u4f7f\u7528\u65b9\u5f0f\u5c31\u548c\u4e00\u822c\u5716\u50cf\u4e00\u6a23\u3002 \u60a8\u53ef\u5728TouchGFX Designer\u8a2d\u5b9a\u5c0f\u5de5\u5177\u4f7f\u7528\u9ede\u9663\u5716\uff0c\u6216\u662f\u4ee5\u7a0b\u5f0f\u78bc\u6307\u6d3e\u9ede\u9663\u5716\u3002"),(0,i.kt)(s.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/image-configuration.png",mdxType:"Figure"},"\u8a2d\u5b9a\u58d3\u7e2e\u7528\u65bcL8-ARGB8888\u5716\u50cf"),(0,i.kt)("p",null,"\u552f\u4e00\u9700\u8981\u9032\u884c\u7684\u8a2d\u5b9a\uff0c\u5c31\u662f\u5c07Compression(\u58d3\u7e2e)\u503c\u8a2d\u5b9a\u70ba\u300cAuto\u300d(\u81ea\u52d5)\u3002 \u63a5\u8457\u5716\u50cf\u8f49\u63db\u5668\u5c07\u81ea\u52d5\u9078\u64c7\u6700\u9069\u5408\u7684\u58d3\u7e2e\u65b9\u6cd5\uff0c\u5982\u679c\u5716\u50cf\u7121\u6cd5\u58d3\u7e2e\u5247\u6703\u9078\u64c7\u4e0d\u58d3\u7e2e\u3002"),(0,i.kt)(s.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/selecting-gauge-image.png",mdxType:"Figure"},"\u70ba\u5c0f\u5de5\u5177\u9078\u64c7\u58d3\u7e2e\u5716\u50cf"),(0,i.kt)("p",null,"\u73fe\u5728\u6211\u5011\u53ef\u4ee5\u548c\u5e73\u5e38\u4e00\u6a23\u70ba\u5c0f\u5de5\u5177\u9078\u64c7\u5716\u50cf\u3002 \u5176\u4e2d\u8207\u672a\u58d3\u7e2e\u5716\u50cf\u4e4b\u9593\u4e26\u6c92\u6709\u4e0d\u540c\u4e4b\u8655\u3002"),(0,i.kt)("p",null,"\u5728\u7a0b\u5f0f\u78bc\u4e4b\u4e2d\u4f7f\u7528\u5716\u50cf\u4e5f\u6c92\u6709\u5dee\u5225\u3002 \u58d3\u7e2e\u9ede\u9663\u5716\u548c\u5e73\u5e38\u4e00\u6a23\u662f\u4ee5\u5176BitmapID\u9032\u884c\u53c3\u7167\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-cpp"}),"    image1.setXY(148, 148);\n    image1.setBitmap(touchgfx::Bitmap(BITMAP_GAUGE_BACKGROUND_ID));\n")),(0,i.kt)("p",null,"\u8acb",(0,i.kt)("a",l({parentName:"p"},{href:"../../ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption#l8-image-compression"}),"\u5728\u6b64"),"\u9032\u4e00\u6b65\u77ad\u89e3\u58d3\u7e2eL8\u5716\u50cf"),(0,i.kt)("h3",l({},{id:"working-with-rgb-compression"}),"RGB Compression"),(0,i.kt)("p",null,"Compressing RGB565, RGB888, or ARGB8888 images in the TouchGFX Designer follows the same process as L8 compression."),(0,i.kt)(s.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/image-configuration-argb8888.png",mdxType:"Figure"},"\u8a2d\u5b9a\u58d3\u7e2e\u7528\u65bcL8-ARGB8888\u5716\u50cf"),(0,i.kt)("p",null,'If selecting "Yes" the Image Converter will compress the image with the algorithm that matches the image format.'),(0,i.kt)("p",null,"As with the L8 Compression, we can select the image for a widget as normal and reference the bitmap in code as usual."),(0,i.kt)("h2",l({},{id:"compression-level"}),"\u58d3\u7e2e\u7a0b\u5ea6"),(0,i.kt)("p",null,"\u5716\u50cf\u8f49\u63db\u5668\u9078\u64c7\u7684\u58d3\u7e2e\u6f14\u7b97\u6cd5\uff0c\u6703\u5beb\u5728\u7522\u751f\u7684\u6a94\u6848\u4e4b\u4e2d\u3002 \u6211\u5011\u4e5f\u53ef\u5728\u5176\u4e2d\u627e\u5230\u58d3\u7e2e\u7a0b\u5ea6\u3002"),(0,i.kt)("p",null,"The image we used above in the L8 Compression example is generated into the file ",(0,i.kt)("inlineCode",{parentName:"p"},"generated/images/src/image_gauge_background.cpp"),". The header of this file reads:"),(0,i.kt)(r.Z,{mdxType:"CodeHeader"},"image_gauge_background.cpp (extract)"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-cpp"}),'// 4.22 D0 AN R0 FL8_ARGB8888 U888 N0 SExtFlashSection EExtFlashSection CL8_LZW9\n\nLOCATION_PRAGMA("ExtFlashSection")\nKEEP extern const unsigned char image_gauge_background[] LOCATION_ATTRIBUTE("ExtFlashSection") = {\n  // 184x184 L8_ARGB8888 pixels. Compression [output/input x 100]: 5735/33856 x 100 = 16.9%\n  0x00, 0x26, 0x50, 0xa8, 0x60, 0xe1, 0x02, 0x86, 0x0c, 0x1a, 0x36, 0x70,\n  ....\n')),(0,i.kt)("p",null,"The end of the comment in the first line shows the compression algorithm. \u6211\u5011\u53ef\u4ee5\u5728\u6b64\u767c\u73fe\u5716\u50cf\u8f49\u63db\u5668\u5df2\u9078\u53d6LZW9\u6f14\u7b97\u6cd5\u3002 \u7b2c5\u884c\u7d50\u5c3e\u986f\u793a\u6211\u5011\u76ee\u524d\u67095735\u4f4d\u5143\u7d44\u7684\u50cf\u7d20\u8cc7\u6599\uff0c\u539f\u59cb\u50cf\u7d20\u5247\u70ba33856\u4f4d\u5143\u7d44\uff0c \u7522\u751f16.9%\u7684\u58d3\u7e2e\u7387(\u58d3\u7e2e\u7a0b\u5ea6\u8d8a\u5c0f\u8d8a\u597d)\u3002 \u6ce8\u610f\uff01 The compression percentage does not count the color table."),(0,i.kt)("h2",l({},{id:"compression-failure"}),"Compression Failure"),(0,i.kt)("p",null,"In some cases the Image Converter gives a warning or error when compressing images. This can happen if the image is not compatible with the selected algorithm, or if the size of the compressed image is not below 90% of the original image. This will only happen in very rare coincidences. For example if a small image of 5 x 5 uses 25 different and distinct colors. Since there is no repetition or redundancy in the image, there is no possibilities for the compression to reduce the data."),(0,i.kt)("h3",l({},{id:"compression-failure-l8-images"}),"L8 Images"),(0,i.kt)("p",null,"For L8 images this can happen if a specific algorithm was selected that does not match the given image. For example if an image contains 17 colors or more, and and L4 compression is selected, the image can not be compressed using the selected algorithm. The Image Converter will print an error message when you generate code, and the Designer will show an error message:"),(0,i.kt)(s.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/l4-failure.png",mdxType:"Figure"},"Compression error with specific algorithm"),(0,i.kt)("p",null,'The solution to the problem is to use another algorithm. The preferred way is to select "Auto" for L8 images. Then the image converter will try all algorithms, and select the best algorithm of those who are applicable.'),(0,i.kt)("p",null,"In some rare cases the image does not compress below 90% of the original size. The Image Converter does not compress the image in that case and issues a warning text as shown below:"),(0,i.kt)(s.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/l8-compression-warning.png",mdxType:"Figure"},"Compression warning"),(0,i.kt)("p",null,'The reason for not compressing is that the saving in flash size does not outweigh the lower rendering performance. It is possible to force the compression by not using "Auto" but selecting one of the algorithms ("L4", "RLE", or "LZW").'),(0,i.kt)("p",null,"The warning message is only informational. The code generation continues and the project will work as expected."),(0,i.kt)("h3",l({},{id:"compression-failure-rgb-images"}),"RGB Images"),(0,i.kt)("p",null,'For RGB image formats you can not select the "Auto", as there is only one compression algorithm. If you select "Yes" and the image is not compressible below 90% of the original size, the Image Converter will generate an error:'),(0,i.kt)(s.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/rgb-failure.png",mdxType:"Figure"},"Compression error with RGB image"),(0,i.kt)("p",null,'The solution here is to select "None" for Compression for the image.'),(0,i.kt)("h2",l({},{id:"decompressing-images-to-the-bitmap-cache"}),"Decompressing Images to the Bitmap Cache"),(0,i.kt)("p",null,"\u7e6a\u88fd\u7684\u58d3\u7e2e\u5716\u50cf\u5728\u5927\u90e8\u5206\u60c5\u6cc1\u4e0b\uff0c\u6548\u80fd\u90fd\u4e0d\u5982\u7e6a\u88fd\u7684\u672a\u58d3\u7e2e\u5716\u50cf\u3002 Further more, as mentioned in the introduction, the graphics accelerators in STM32 micro-controllers (DMA2D and GPU2D) cannot draw the compressed images directly. Therefore, compressed images are drawn by a mix of software and hardware, resulting in lower performance and higher cpu-load."),(0,i.kt)("p",null,"\u57fa\u65bc\u4ee5\u4e0a\u5404\u7a2e\u539f\u56e0\uff0cTouchGFX\u4e5f\u6709\u529f\u80fd\u53ef\u5728\u57f7\u884c\u968e\u6bb5\u5c07\u58d3\u7e2e\u5716\u50cf\u89e3\u58d3\u7e2e\u81f3RAM\u4e4b\u4e2d\u7684\u9ede\u9663\u5716\u5feb\u53d6\u3002"),(0,i.kt)("p",null,"\u5c07\u5716\u50cf\u89e3\u58d3\u7e2e\u81f3RAM\u53ef\u8b93\u7e6a\u88fd\u6548\u80fd\u985e\u4f3c\u65bc\u4f7f\u7528\u672a\u58d3\u7e2e\u5716\u50cf\uff0c\u800c\u4e14\u53ef\u5229\u7528\u52a0\u901f\u5668\u7e6a\u88fd\u5716\u50cf\u3002"),(0,i.kt)("p",null,"\u70ba\u4e86\u80fd\u5920\u89e3\u58d3\u7e2e\uff0c\u6211\u5011\u9996\u5148\u9700\u8981\u8a2d\u5b9a\u9ede\u9663\u5716\u5feb\u53d6\u3002 \u8acb",(0,i.kt)("a",l({parentName:"p"},{href:"caching-bitmaps#bitmap-cache-configuration"}),"\u5728\u6b64"),"\u53c3\u95b1\u4f7f\u7528\u9ede\u9663\u5716\u5feb\u53d6\u7684\u66f4\u591a\u8cc7\u8a0a\u3002"),(0,i.kt)("p",null,"\u8a2d\u5b9a\u9ede\u9663\u5716\u5feb\u53d6\u5f8c\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"Bitmap::decompress"),"\u51fd\u6578\u89e3\u58d3\u7e2e\u5716\u50cf\u3002 \u4ee5\u4e0b\u662f\u5b8c\u6574\u7684\u7a0b\u5f0f\u78bc\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-cpp"}),"// Define an array for the bitmap cache\nuint16_t cache[20*1024]; //40 KB cache\n// Define an array for the decompression temporary buffer\nuint16_t lzwBuffer[1024];\n\nvoid TemplateView::setupScreen()\n{\n    ...\n    Bitmap::setCache(cache, sizeof(cache));                             // Register the bitmap cache\n    bool r = Bitmap::decompress(BITMAP_GAUGE_BACKGROUND_ID, lzwBuffer); // Decompress the bitmap\n    image1.setBitmap(touchgfx::Bitmap(BITMAP_GAUGE_BACKGROUND_ID));     // Use the bitmap as normal\n    image1.setXY(148, 148);                                             // Position Image widget\n}\n")),(0,i.kt)("p",null,"In this example we want to decompress the 184 x 184 image from the L8 Compression example above into the bitmap cache. The bitmap cache must be big enough to the hold uncompressed image. The 184 x 184 pixels plus the color table holding 207 ARGB8888 colors. The total size is therefore 34,688 bytes."),(0,i.kt)("p",null,"In this example we use the LZW9 algorithm. A 2048 bytes buffer is used by the decompresser during the decompression of an LZW9 compressed image (for building a dictionary). The buffer is not required after the decompression and can be reused for other purposes. The buffer is not required for decompression of L4, RLE, QOI, or QOI565 compressed images."),(0,i.kt)("p",null,"\u89e3\u58d3\u7e2e\u5716\u50cf\u4e0d\u518d\u9700\u8981\u4f7f\u7528\u6642\uff0c\u53ef\u5229\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"Bitmap::cacheRemoveBitmap"),"\u65b9\u6cd5\u5f9e\u9ede\u9663\u5716\u5feb\u53d6\u4e2d\u79fb\u9664\u3002"),(0,i.kt)("h3",l({},{id:"limit-program-size"}),"Limit program size"),(0,i.kt)("p",null,"If you use decompression into the bitmap cache you have a few options to limit the size of your program. As mentioned above there are two types of image compression; L8 and RGB. When using ",(0,i.kt)("inlineCode",{parentName:"p"},"Bitmap::decompress")," your program will contain the code for both decompressing L8 and RGB images. If you only use the RGB image compression, you can use the dedicated method for decompressing RGB images into the bitmap cache, which is ",(0,i.kt)("inlineCode",{parentName:"p"},"Bitmap::decompressRGB"),", that way your program will only contain the required code for decompressing RGB images. The same applies if you only use L8 compression, here the method is called ",(0,i.kt)("inlineCode",{parentName:"p"},"Bitmap::decompressL8"),". See examples below."),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-cpp"}),"void TemplateView::setupScreen()\n{\n    ...\n    // Decompress the bitmap (RGB using QOI)\n    bool r = Bitmap::decompressRGB(BITMAP_GAUGE_BACKGROUND_ID);\n    ...\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-cpp"}),"void TemplateView::setupScreen()\n{\n    ...\n    // Decompress the bitmap (L8 using RLE, no buffer required)\n    bool r = Bitmap::decompressL8(BITMAP_GAUGE_BACKGROUND_ID);\n    ...\n}\n")),(0,i.kt)("h2",l({},{id:"limitations"}),"\u9650\u5236"),(0,i.kt)("p",null,"There are a few limitations when working with compressed images. Compressed images cannot be used with Widgets that scales or rotates the image, or with Widgets that fills an area, or with the Canvas widgets."),(0,i.kt)(s.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/scalableimage.png",mdxType:"Figure"},"\u58d3\u7e2e\u5716\u50cf\u642d\u914d\u4f7f\u7528\u4e0d\u76f8\u5bb9\u7684\u5c0f\u5de5\u5177\u3002"),(0,i.kt)(n.Z,{mdxType:"Caution"},"\u58d3\u7e2e\u5716\u50cf\u7121\u6cd5\u642d\u914d\u4f7f\u7528\u6240\u6709\u5c0f\u5de5\u5177\u3002 Designer\u6703\u986f\u793a\u8b66\u544a\u5716\u793a\u3002"),(0,i.kt)("p",null,"These limitations are made for performance reasons. TouchGFX Designer\u4e0d\u6703\u8b93\u60a8\u9078\u64c7\u58d3\u7e2e\u5716\u50cf\u3002"),(0,i.kt)("p",null,"If you want to use a specific image with any of these Widgets we suggest to not enable compression for the image. Alternatively, you can decompress the image at runtime."),(0,i.kt)("p",null,"\u4e0d\u652f\u63f4\u58d3\u7e2e\u5716\u50cf\u7684\u5c0f\u5de5\u5177\u5982\u4e0b\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u7d0b\u7406\u6620\u5c04\u5668"),(0,i.kt)("li",{parentName:"ul"},"ScalableImage"),(0,i.kt)("li",{parentName:"ul"},"\u7528\u65bc\u6307\u6a19\u53ca\u5f27\u7dda\u7684Gauge"),(0,i.kt)("li",{parentName:"ul"},"\u7528\u65bc\u586b\u5145\u7e6a\u5716\u4e0b\u65b9\u5340\u57df\u7684Static-\u53caDynamicGraph"),(0,i.kt)("li",{parentName:"ul"},"\u7528\u65bc\u6642\u9418\u6307\u91dd\u7684AnalogClock"),(0,i.kt)("li",{parentName:"ul"},"Circle\u3001Line\u53caShape"),(0,i.kt)("li",{parentName:"ul"},"Circle-\u53caLineProgress")))}k.isMDXComponent=!0}}]);